// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entities.proto

#ifndef PROTOBUF_INCLUDED_entities_2eproto
#define PROTOBUF_INCLUDED_entities_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_entities_2eproto 

namespace protobuf_entities_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_entities_2eproto
namespace entities {
class Point3d;
class Point3dDefaultTypeInternal;
extern Point3dDefaultTypeInternal _Point3d_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
}  // namespace entities
namespace google {
namespace protobuf {
template<> ::entities::Point3d* Arena::CreateMaybeMessage<::entities::Point3d>(Arena*);
template<> ::entities::PointCloud* Arena::CreateMaybeMessage<::entities::PointCloud>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace entities {

// ===================================================================

class Point3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:entities.Point3d) */ {
 public:
  Point3d();
  virtual ~Point3d();

  Point3d(const Point3d& from);

  inline Point3d& operator=(const Point3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3d(Point3d&& from) noexcept
    : Point3d() {
    *this = ::std::move(from);
  }

  inline Point3d& operator=(Point3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3d* internal_default_instance() {
    return reinterpret_cast<const Point3d*>(
               &_Point3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point3d* other);
  friend void swap(Point3d& a, Point3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3d* New() const final {
    return CreateMaybeMessage<Point3d>(NULL);
  }

  Point3d* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point3d>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point3d& from);
  void MergeFrom(const Point3d& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:entities.Point3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_entities_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:entities.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PointCloud* other);
  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(NULL);
  }

  PointCloud* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .entities.Point3d Points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::entities::Point3d* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::entities::Point3d >*
      mutable_points();
  const ::entities::Point3d& points(int index) const;
  ::entities::Point3d* add_points();
  const ::google::protobuf::RepeatedPtrField< ::entities::Point3d >&
      points() const;

  // @@protoc_insertion_point(class_scope:entities.PointCloud)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::entities::Point3d > points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_entities_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3d

// double X = 1;
inline void Point3d::clear_x() {
  x_ = 0;
}
inline double Point3d::x() const {
  // @@protoc_insertion_point(field_get:entities.Point3d.X)
  return x_;
}
inline void Point3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:entities.Point3d.X)
}

// double Y = 2;
inline void Point3d::clear_y() {
  y_ = 0;
}
inline double Point3d::y() const {
  // @@protoc_insertion_point(field_get:entities.Point3d.Y)
  return y_;
}
inline void Point3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:entities.Point3d.Y)
}

// double Z = 3;
inline void Point3d::clear_z() {
  z_ = 0;
}
inline double Point3d::z() const {
  // @@protoc_insertion_point(field_get:entities.Point3d.Z)
  return z_;
}
inline void Point3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:entities.Point3d.Z)
}

// -------------------------------------------------------------------

// PointCloud

// repeated .entities.Point3d Points = 1;
inline int PointCloud::points_size() const {
  return points_.size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline ::entities::Point3d* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:entities.PointCloud.Points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::entities::Point3d >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:entities.PointCloud.Points)
  return &points_;
}
inline const ::entities::Point3d& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:entities.PointCloud.Points)
  return points_.Get(index);
}
inline ::entities::Point3d* PointCloud::add_points() {
  // @@protoc_insertion_point(field_add:entities.PointCloud.Points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::entities::Point3d >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:entities.PointCloud.Points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entities

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_entities_2eproto
